Spaces.el is an emacs library to manage named window configurations.

h2. What does it do?

Spaces.el lets you easily assign a name to a window configuration, then switch between window configurations by selecting the named space you want. When you combine spaces.el with the normal emacs window splitting commands, managing your emacs window configurations starts to feel similar to using a manual tiling window manager like ratpoison or stumpwm.

The only function you really need is sp-switch-space. You can use it both to switch to an existing space and to create new spaces. A typical session would look something like this.

* Set up some complicated window configuration.
* M-x sp-switch-space. Type "default" and press enter. This creates a new space.
* M-x sp-switch-space. Type "gdb" and press enter. Now you have two spaces, one named "default" and one named "gdb".
* M-x gdb. Run gdb with gdb-many-windows set to t, which launches gdb with a specific window configuration, obliterating your carefully set up window config.
* M-x sp-switch-space. Select the "default" space to reload your previous window config. Use sp-switch-space to switch back and forth between the spaces.

You should obviously bind sp-switch-space to a key for convenience.

Spaces.el has nothing to do with gdb of course. Gdb is just meant as an example. Spaces.el is particularly useful to help manage emacs libs (e.g. ediff) that need to muck around with the window config.

h2. Setup and Requirements

Put spaces.el somewhere on your load-path, then (require 'spaces).

I've only tested with my standard emacs setup, which is a source checkout of the emacs 24 code. It should work with any emacs that supports ido-mode and has the current-window-configuration function.

h2. How it works

Internally, spaces.el is just a wrapper around current-window-configuration and set-window-configuration. When you switch spaces, the current window config is stored, and the window config of the newly selected space is loaded.

Selecting a space is done using ido-completing-read, for convenience.

One really annoying thing about current-window-configuration is that it saves the location of the cursor ("point" in emacs terminology) of each window, and resets point to the saved value when you load the window config, even if you've played around with the buffer and moved to some other location since you've saved the window config. It'd be preferable if set-window-configuration kept point the same as it was when you last visited the buffer. I've seen other people "complaining":http://stackoverflow.com/questions/5830494/windows-configuration-to-registers/ about this.

Before loading a window config, spaces.el stores each buffer's point, and then restores point in each visible buffer after the window config is loaded. This takes care of the "don't save the point" problem.

h2. Related libs

I've written some other libs related to window management. Check out "window-jump.el":https://github.com/chumpage/window-jump.el and "window-grid.el":https://github.com/chumpage/window-grid.el.
